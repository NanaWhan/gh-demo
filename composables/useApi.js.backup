export const useApi = () => {
  const config = useRuntimeConfig();
  const token = useCookie("auth-token", {
    default: () => null,
    secure: true,
    sameSite: "strict",
  });

  // Create base API instance
  const $api = $fetch.create({
    baseURL: config.public.apiBase,
    headers: {
      "Content-Type": "application/json",
    },
    onRequest({ request, options }) {
      // Add auth token to requests
      if (token.value) {
        options.headers = {
          ...options.headers,
          Authorization: `Bearer ${token.value}`,
        };
      }
    },
    onResponseError({ response }) {
      // Handle auth errors globally
      if (response.status === 401) {
        // Clear invalid token
        token.value = null;
        // Redirect to login
        navigateTo("/login");
      }
    },
  });

  // API methods
  const api = {
    // Authentication
    auth: {
      login: (credentials) =>
        $api("/auth/login", {
          method: "POST",
          body: credentials,
        }),

      register: (userData) =>
        $api("/auth/register", {
          method: "POST",
          body: userData,
        }),

      requestOtp: (data) =>
        $api("/auth/request-otp", {
          method: "POST",
          body: data,
        }),

      verifyOtp: (data) =>
        $api("/auth/verify-otp", {
          method: "POST",
          body: data,
        }),

      logout: () =>
        $api("/auth/logout", {
          method: "POST",
        }),
    },

    // User management
    user: {
      getProfile: () => $api("/user/profile"),

      updateProfile: (profileData) =>
        $api("/user/profile", {
          method: "PUT",
          body: profileData,
        }),

      changePassword: (passwordData) =>
        $api("/user/change-password", {
          method: "PUT",
          body: passwordData,
        }),

      getBookingHistory: (params = {}) =>
        $api("/user/booking-history", {
          query: params,
        }),

      deleteAccount: (reason) =>
        $api("/user/account", {
          method: "DELETE",
          body: { reason },
        }),
    },

    // 📋 Booking management - Service-specific endpoints
    booking: {
      // Service-specific submissions
      submitFlight: (bookingData) =>
        $api("/booking/flight", {
          method: "POST",
          body: bookingData,
        }),

      submitHotel: (bookingData) =>
        $api("/booking/hotel", {
          method: "POST", 
          body: bookingData,
        }),

      submitTour: (bookingData) =>
        $api("/booking/tour", {
          method: "POST",
          body: bookingData,
        }),

      submitVisa: (bookingData) =>
        $api("/booking/visa", {
          method: "POST",
          body: bookingData,
        }),

      submitCompletePackage: (bookingData) =>
        $api("/booking/complete-package", {
          method: "POST",
          body: bookingData,
        }),

      // Tracking and management
      track: (referenceNumber) => $api(`/booking/track/${referenceNumber}`),

      getMyBookings: () => $api("/booking/my-bookings"),
    },

    // Travel packages
    packages: {
      getFeatured: () => $api("/travelpackage/featured"),

      getAll: (params = {}) =>
        $api("/travelpackage", {
          query: params,
        }),

      getById: (id) => $api(`/travelpackage/${id}`),

      getDestinations: () => $api("/travelpackage/destinations"),

      // Note: Search functionality can be handled by getAll with filters
      create: (packageData) =>
        $api("/travelpackage", {
          method: "POST",
          body: packageData,
        }),

      update: (id, packageData) =>
        $api(`/travelpackage/${id}`, {
          method: "PUT",
          body: packageData,
        }),

      delete: (id) =>
        $api(`/travelpackage/${id}`, {
          method: "DELETE",
        }),
    },

    // 👨‍💼 Admin endpoints (/api/admin) [Auth Required]
    admin: {
      login: (credentials) =>
        $api("/admin/login", {
          method: "POST",
          body: credentials,
        }),

      create: (adminData) =>
        $api("/admin/create", {
          method: "POST",
          body: adminData,
        }),

      getDashboard: () => $api("/admin/dashboard"),

      getBookings: (params = {}) =>
        $api("/admin/bookings", {
          query: params,
        }),

      getBooking: (id) => $api(`/admin/bookings/${id}`),

      updateBookingStatus: (id, statusData) =>
        $api(`/admin/bookings/${id}/status`, {
          method: "PUT",
          body: statusData,
        }),

      updateBookingPricing: (id, pricingData) =>
        $api(`/admin/bookings/${id}/pricing`, {
          method: "PUT",
          body: pricingData,
        }),

      addBookingNote: (id, noteData) =>
        $api(`/admin/bookings/${id}/notes`, {
          method: "POST",
          body: noteData,
        }),

      generatePaymentLink: (id) =>
        $api(`/admin/bookings/${id}/payment-link`, {
          method: "POST",
        }),
    },

    // 🖼️ Image Upload endpoints (/api/image) [Auth Required]
    image: {
      upload: (file, params = {}) => {
        const formData = new FormData();
        formData.append("file", file);
        return $api("/image/upload", {
          method: "POST",
          body: formData,
          query: params,
          headers: {}, // Remove content-type header for multipart
        });
      },

      uploadMultiple: (files, params = {}) => {
        const formData = new FormData();
        files.forEach((file) => formData.append("files", file));
        return $api("/image/upload-multiple", {
          method: "POST",
          body: formData,
          query: params,
          headers: {},
        });
      },

      uploadProfile: (file) => {
        const formData = new FormData();
        formData.append("file", file);
        return $api("/image/upload-profile", {
          method: "POST",
          body: formData,
          headers: {},
        });
      },

      uploadPackage: (file, packageId) => {
        const formData = new FormData();
        formData.append("file", file);
        return $api("/image/upload-package", {
          method: "POST",
          body: formData,
          query: { packageId },
          headers: {},
        });
      },

      delete: (filePath) =>
        $api("/image/delete", {
          method: "DELETE",
          query: { filePath },
        }),

      getUrl: (filePath) =>
        $api("/image/url", {
          query: { filePath },
        }),
    },

    // 💳 Payment endpoints (/api/payment)
    payment: {
      verify: (reference) =>
        $api(`/payment/verify/${reference}`, {
          method: "POST",
        }),
    },
  };

  // Helper methods
  const setToken = (newToken) => {
    token.value = newToken;
  };

  const clearToken = () => {
    token.value = null;
  };

  const isAuthenticated = computed(() => !!token.value);

  return {
    api,
    setToken,
    clearToken,
    isAuthenticated,
    $api, // Raw API instance for custom calls
  };
};
